<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 设置为IUserDao接口方法提供sql语句配置 -->
<mapper namespace="com.studentSystem.dao.AssociateDao">

<select id="findById" resultType="com.studentSystem.model.Associate">
    select * from associate where id = #{id}
</select>
    <insert id="insertOne">
        insert into associate(id,username,email_address,password,create_time,recommend_word,img_url,recommend,user_id) values(#{arg0},#{arg1},#{arg2},#{arg3},#{arg4},#{arg5},#{arg6},#{arg7},#{arg8})
    </insert>
    <select id="findUnsubscribed" resultType="com.studentSystem.model.AssociateView">
        select a.id as associate_id,a.username as associate_name,a.recommend,a.recommend_word,u.username,a.email_address,a.person_count,a.max_person as email from associate as a,user as u where a.user_id=u.id and state =0
    </select>
    <update id="updateState">
        update associate set state = 1 where id = #{id}
    </update>
    <delete id="deleteOne">
        delete from associate where id = #{id}
    </delete>
    <select id="findSubscribed" resultType="com.studentSystem.model.AssociateView">
      select a.id as associate_id,a.username as associate_name,a.recommend_word,a.email_address as email,a.img_url,a.person_count,a.max_person from associate as a where state =1
    </select>

    <insert id="insertApplicant" parameterType="com.studentSystem.model.Applicant">
        insert into apply(apply_id,user_id,associate_id,user_introduce,user_reason,state,time_stamp) values (#{apply_id},#{user_id},#{associate_id},#{user_introduce},#{user_reason},#{state},#{time_stamp})
    </insert>
    <select id="findMyApplyById" resultType="com.studentSystem.model.ApplicantMessage">
        select associate.username as associate_name,apply.time_stamp,apply.state from apply,associate where apply.associate_id = associate.id and apply.user_id = #{id}
    </select>
    <select id="findMyAssociateById" resultType="com.studentSystem.model.ApplicantMessage">
        select username as associate_name,create_time,state from associate where associate.user_id = #{id}
    </select>
    <select id="findAssociateByEmail" resultType="com.studentSystem.model.Associate">
        select id,username,email_address,password,create_time,person_count,recommend_word,img_url,activity,state,user_id,role from associate where email_address = #{email_address}
    </select>
    <select id="findApplyMessage" resultType="com.studentSystem.model.AssociateMessage">
        select apply_id,user.username as username,time_stamp,user_introduce,user_reason from associate,apply,user where  associate.id = apply.associate_id and apply.user_id = user.id and associate.id = #{id} and apply.state=0
    </select>
    <update id="updateApplyWithY">
        update apply set state=1 where apply_id = #{id}
    </update>
    <update id="updateApplyWithN">
        update apply set state=-1 where apply_id= #{id}
    </update>
    <select id="findScore" resultType="com.studentSystem.model.AssociateScoreView">
        select associate.username,associate.score from apply,associate where associate.id = apply.associate_id and apply.state = 1 and apply.user_id=#{id}
    </select>
    <select id="findUserIdByApplyId" resultType="long">
        select user_id from apply where apply_id=#{id}
    </select>
    <insert id="insertMember">
        insert into member(id,user_id,associate_id) values (#{arg0},#{arg1},#{arg2})
    </insert>
    <select id="findMemberList" resultType="com.studentSystem.model.MemberView">
        select member.id as member_id,associate.username as associate_name,associate.cost,member.state from member,associate where member.user_id = #{id} and member.associate_id=associate.id
    </select>
    <update id="updateMemberState" parameterType="long">
         update member set state = 1 where member.id = #{id}
    </update>
    <select id="findAssociateByMemberId" resultType="com.studentSystem.model.EmailMessage">
        select u.username,u.email,associate.username as associate_name from member,user as u,associate where member.user_id=u.id and member.associate_id=associate.id and member.id=#{id}
    </select>
    <select id="findActivityByUserId" resultType="com.studentSystem.model.ActivityView">
        select a.id as activity_id,associate.id as associate_id,associate.username as associate_name,a.activity_time,a.activity_name,a.activity_content from activity as a,member as m,associate where m.user_id = #{user_id} and m.state=1 and m.associate_id=a.associate_id and m.associate_id=associate.id
    </select>
    <select id="findAllJoins" resultType="long">
        select activity_id from joins where user_id = #{id}
    </select>
    <select id="findActivityInJoins" resultType="com.studentSystem.model.ActivityView">
        select activity.id as activity_id,associate.id as associate_id,associate.username as associate_name,activity.activity_time,activity.activity_name,activity.activity_content from joins,activity,associate WHERE joins.user_id = #{id} and joins.activity_id=activity.id and activity.associate_id = associate.id
    </select>
    <select id="insertJoins">
        insert into joins(id,user_id,activity_id) values (#{arg0},#{arg2},#{arg1})
    </select>
    <select id="insertActivity">
        insert into activity(id,associate_id,activity_time,activity_name,activity_content) values (#{arg0},#{arg1},#{arg2},#{arg3},#{arg4})
    </select>
    <update id="updateActivityJoinsNumber">
        update activity set counts = counts+1 where id = #{id}
    </update>
    <select id="findSubscribedByPage" resultType="com.studentSystem.model.AssociateView">
        select a.id as associate_id,a.username as associate_name,a.recommend_word,a.email_address as email,a.img_url,a.person_count,a.max_person from associate as a where state =1 limit #{arg0},#{arg1}
    </select>
    <select id="findTotalCounts" resultType="int">
        select count(associate.id) from associate where state=1
    </select>
    <update id="updateAssociateCount">
        update associate set person_count = person_count+1 where associate.username = #{name}
    </update>
    <select id="findStatusByUser" resultType="int">
        select status from user where user.id=#{id}
    </select>
    <update id="updateStatus">
        update user set status = status+1 where user.id = #{user_id}
    </update>
    <select id="findMemberByAssociateId" resultType="com.studentSystem.model.MemberMessage">
        select m.id as member_id,u.student_number as user_number,u.username,m.active_number,m.state from member as m,user as u where m.user_id=u.id  and m.associate_id = #{id} and state!=2
    </select>
    <update id="deleteMember">
        update member set state = -1 where id = #{id}
    </update>
    <select id="findNotBeDeleteMember" resultType="com.studentSystem.model.MemberMessage">
        select m.id as member_id,u.student_number as user_number,u.username,m.active_number,m.state from member as m,user as u where m.user_id=u.id  and m.associate_id = #{id} and state != 2 and state!=-1
    </select>
    <update id="updateGraduateMember"  parameterType="java.util.Map">
      <!--UPDATE member SET-->
      <!--state = CASE id-->

        <!--<foreach collection="list" item="id" separator=",">-->
            <!--WHEN #{id} THEN 2-->
        <!--</foreach>-->
    <!--END-->
<!--WHERE id IN <foreach item="id" collection="list" separator="," open="(" close=")" index="">  #{id}-->
    <!--</foreach>-->

        <!--<foreach collection="list" separator=";" item="cus">-->
            <!--update member set state = 2 where id = #{cus}-->
        <!--</foreach>-->


        update member
        <trim prefix="set" suffixOverrides=",">
            <!-- 拼接case when 这是一种写法 -->
            <!--<foreach collection="list" separator="" item="cus" open="c_age = case id" close="end, ">-->
            <!--when #{cus.id} then #{cus.age}-->
            <!--</foreach>-->

            <!-- 拼接case when 这是另一种写法，这种写着更专业的感觉 -->
            <trim prefix="state =case" suffix="end,">
                <foreach collection="list" item="cus">
                  when id=#{cus} then 2
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="cus">
                id = #{cus}
            </foreach>
        </where>
    </update>
    <update id="updateUserActivity">
        update member set member.active_number = member.active_number+1 where member.user_id=#{arg0} and member.associate_id=#{arg1}
    </update>
</mapper>